#!/usr/bin/env bash

set -eu

define() { IFS='\n' read -r -d '' ${1} || true ; }

. "${0%/*}"/../getoptlong.sh

define pod <<"=cut"

=encoding utf-8

=head1 NAME

    cmap - Term::ANSIColor::Concise demo/test script

=head1 SYNOPSIS

    cmap [ options ]

        -f # , --format    specify color format (*hsl, rgb, lch)
        -m # , --mod       set color modifier (ex. +r180%y50)
        -r   , --reverse   flip foreground/background color
        -L # , --lead      set leader string
        -l # , --label     set label string
        -C # , --column    set column number
        -o # , --order     set X,Y,Z order
        -[XYZ] #           set X,Y,Z values

        -h   , --help      show help
        -d   , --debug     debug
        -n   , --dryrun    dry-run
        -t   , --terse     terse message
        -q   , --quiet     quiet mode
        -v   , --verbose   verbose mode
        -M # , --pkg       select color handling package
        -I # , --include   include Perl module path

=cut

note()   { [[ $quiet ]] && return ; echo "$@" ; }
warn()   { note "$@" >&2 ; }
die()    { warn "$@" ; exit 1 ; }

myhelp() {
    local man help usage continue
    eval "$(getoptlong init)"
    declare -A OPTS=(
	[      man|m ]=
       	[     help|h ]=
       	[    usage|u ]=
       	[ continue|c ]=
    )
    getoptlong init OPTS
    getoptlong parse "$@" && eval "$(getoptlong set)"
    if [[ $man ]] ; then
	perldoc $0
    else
	sed -r \
	    -e '/^$/N' \
	    -e '/^\n*(#|=encoding)/d' \
	    -e 's/^(\n*)=[a-z]+[0-9]* */\1/' \
	    -e '/Version/q' \
	    <<< $pod
    fi
    [[ $1 && ! ${continue} ]] && exit 0
    return 0
}

define USAGE <<END
cmap - Term::ANSIColor::Concise demo/test script

cmap [ options ]
END

declare -A OPTS=(
    [&USAGE]="$USAGE"
    [  format | f : # specify color format (*hsl, rgb, lch) ]=hsl
    [ default | D : #                                       ]="+r180%y50"
    [    mods | m @ # set color modifier (ex. +r180%y50)    ]=
    [     pkg | M : # select color handling package         ]=
    [    lead | L : # set leader string                     ]="██  "
    [           X @ # set X values                          ]=
    [           Y @ # set Y values                          ]=
    [           Z @ # set Z values                          ]=
    [   order | o : # set X,Y,Z order                       ]=
    [   terse | t   # terse message                         ]=
    [   quiet | q   # quiet mode                            ]=
    [   label | l ? # set label string                      ]=
    [ reverse | r   # flip foreground/background color      ]=
    [  column | C : # set column number                     ]=
    [ verbose | v   # verbose mode                          ]=
    [  dryrun | n   # dry-run                               ]=
    [   debug | d + # debug                                 ]=
    [   trace | x   # trace execution                       ]=
    [   usage | u   # show usage                            ]=
    [     man       # show man page                         ]=
    [ include | I : # include Perl module path              ]=./lib
    [ message     % # set message                           ]=
#   [ message     % #                                       ]="([BEGIN]=$'HELLO\n' [END]=$'\nGOODBY')"
)
getoptlong init OPTS PERMUTE= DEBUG=${DEBUG_ME:-}
getoptlong callback man   'myhelp --man'  \
                    usage 'myhelp --usage'
getoptlong callback X xyz Y xyz Z xyz
xyz() { declare -n _xyz=$1 && _xyz=() ; }

opt()   { declare -n x=$1; [[ ${x} ]] ; }

label() { [[ $1 ]] || label='hasta la vista  '; }
trace() { [[ $1 ]] && set -x || set +x ; }
getoptlong callback $(printf "%s - \n" label trace)

format() {
    (( $# == 0 )) && return
    local _fmt=${@:$#}
    case $_fmt in
    hsl)
	order="x z y"
	X=($(seq 0 60 359))  # Hue
	Y=($(seq 0 5 99))    # Lightness
	Z=(20,80,100)            # Saturation
	;;
    rgb)
	order="x y z"
	X=(0 51 102 153 204 255) # Red
	Y=($(seq 0 15 255))  # Green
	Z=(0,128,255)            # Blue
	;;
    rgb-chart)
	format=rgb
	order="x y z"
	X=($(seq 0 2 255))   # Red
	Y=($(seq 0 15 255))  # Green
	Z=(0,128,255)            # Blue
	label=" "
	terse=yes
	lead=
	mod=";"
	;;
    lch)
	order="y z x"
	X=($(seq 0 60 359))  # Hue
	Y=($(seq 0 5 99))    # Luminance
	Z=(20,60,100)            # Chroma
	;;
    *)
	die "$_fmt: unknown format"
    esac
}
getoptlong callback format -
[[ $format ]] && format $format

getoptlong parse "$@" && eval "$(getoptlong set)"

[[ $pkg     ]] && export TAC_COLOR_PACKAGE=${pkg}
[[ $include ]] && export PERL5LIB=${include}:$PERL5LIB
[[ $debug   ]] && {
    gol_dump -a | column
    declare -p mods
    declare -p message
}

declare -A xyz=(
    [x]=0 [y]=1 [z]=2
    [0]=0 [1]=1 [2]=2
)
reorder() {
    local orig=("$@") ans p n
    for p in $order ; do
	n=${xyz[$p]}
	ans+=(${orig[$n]})
    done
    echo ${ans[@]}
}

table() {
    local mod=$1
    local IFS=$' \t\n,'
    for z in ${Z[@]} ; do
	local option=(--separate $'\n')
	for x in ${X[@]} ; do
	    local ys=${Y[0]} ye=${Y[$(( ${#Y[@]} - 1 ))]}
	    [[ $terse ]] || option+=("x=$x,y=$ys-$ye,z=$z")
	    for y in ${Y[@]} ; do
		col=$(printf "%s(%03d,%03d,%03d)" ${format} $(reorder $x $y $z))
		[[ $reverse ]] && arg="$col/$col$mod" \
		            || arg="$col$mod/$col"
		text="${lead}${label:-$col$mod}"
		option+=(-c "$arg" "$text")
	    done
	done
	if [[ $dryrun ]] ; then
	    echo ansiecho "${option[@]}"
	else
	    ansiecho "${option[@]}" | ansicolumn -C ${column:-${#X[@]}} --cu=1 --margin=0
	fi
    done
}

(( $# > 0 )) && echo "$@"
[[ ${#mods[@]} == 0 ]] && mods=(${default})

[[ -v message[BEGIN] ]] && echo "${message[BEGIN]}"

for mod in "${mods[@]}" ; do
    table $mod
done

[[ -v message[END] ]] && echo "${message[END]}"
